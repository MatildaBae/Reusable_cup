# -*- coding: utf-8 -*-
"""환경요인_전처리_0718.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sK6F6Gwyi5iVnyRjED1BV6ubFp0a214h
"""

# !pip install geopy

import pandas as pd
from geopy.geocoders import Nominatim
from geopy.extra.rate_limiter import RateLimiter

from tqdm import tqdm

# 엑셀 파일 경로 지정
file_path = '/content/trashbin.xlsx'

# 엑셀 파일 읽기, 5번째 행부터 컬럼명으로 인식
df = pd.read_excel(file_path, header=4)

# 데이터 확인
df.head()

# delay 뜨고 잘 안됨..
from geopy.geocoders import Nominatim
geo_local = Nominatim(user_agent='South Korea')

# 위도, 경도 반환하는 함수
def geocoding(address):
    try:
        geo = geo_local.geocode(address)
        x_y = [geo.latitude, geo.longitude]
        return x_y

    except:
        return [0,0]

# 도로명주소 컬럼명을 'address'로 가정하고 위도와 경도 컬럼 추가
df[['latitude', 'longitude']] = df['설치위치(도로명 주소)'].apply(geocoding)

# 데이터 확인
df.head()

# 데이터 시각화 및 클러스터링

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

# 쓰레기통 위치 시각화
plt.figure(figsize=(10, 8))
sns.scatterplot(x='longitude', y='latitude', data=df, hue='waste_volume', size='waste_volume', sizes=(20, 200))
plt.title('Trash Can Locations and Waste Volume')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.legend(title='Waste Volume')
plt.show()

# 클러스터링을 위한 좌표 데이터
coords = df[['latitude', 'longitude']]

# KMeans 클러스터링
kmeans = KMeans(n_clusters=5, random_state=0).fit(coords)
df['cluster'] = kmeans.labels_

# 클러스터 결과 시각화
plt.figure(figsize=(10, 8))
sns.scatterplot(x='longitude', y='latitude', data=df, hue='cluster', palette='viridis')
plt.title('Trash Can Locations Clustering')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.legend(title='Cluster')
plt.show()

# 최적입지선정?

# 각 클러스터별 일회용 컵 배출량 합계
cluster_waste = df.groupby('cluster')['waste_volume'].sum().reset_index()
cluster_waste = cluster_waste.rename(columns={'waste_volume': 'total_waste_volume'})

# 최적 입지 선정: 일회용 컵 배출량이 가장 많은 클러스터
optimal_cluster = cluster_waste.loc[cluster_waste['total_waste_volume'].idxmax()]

# 최적 클러스터에 해당하는 쓰레기통 위치
optimal_locations = df[df['cluster'] == optimal_cluster['cluster']]

# 최적 위치 시각화
plt.figure(figsize=(10, 8))
sns.scatterplot(x='longitude', y='latitude', data=optimal_locations, hue='waste_volume', size='waste_volume', sizes=(20, 200), palette='viridis')
plt.title('Optimal Locations for Reusable Cup Vending Machines')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.legend(title='Waste Volume')
plt.show()

# 최적 위치 데이터 출력
print(optimal_locations)